// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  //user created content
  handle           String?
  bio              String?           @db.VarChar(10000)
  posts            Post[]
  replies          Reply[]
  sentMessages     Message[]         @relation("sentMessages")
  receivedMessages Message[]         @relation("receivedMessages")
  postReactions    PostReaction[]
  replyReactions   ReplyReaction[]
  messageReactions MessageReaction[]
  followings       Follow[]          @relation("following")
  followers        Follow[]          @relation("follower")
}

// app

//the types map to specific types depending on the db provider
//for mysql: Float maps to "DOUBLE" and String maps to varchar(191)
//see https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference
//see relation tables https://www.prisma.io/docs/concepts/components/prisma-schema/relations/many-to-many-relations#relation-tables

model Follow {
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Post {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  author    User           @relation(fields: [authorId], references: [id])
  authorId  String
  text      String         @db.VarChar(10000)
  replies   Reply[]
  reactions PostReaction[]
}

model PostReaction {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  text      String

  @@id([userId, postId])
}

model Reply {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  post      Post            @relation(fields: [postId], references: [id])
  postId    String
  author    User            @relation(fields: [authorId], references: [id])
  authorId  String
  reactions ReplyReaction[]
  text      String          @db.VarChar(10000)
}

model ReplyReaction {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  reply     Reply    @relation(fields: [replyId], references: [id])
  replyId   String
  text      String

  @@id([userId, replyId])
}

model Message {
  id         String            @id @default(cuid())
  createdAt  DateTime          @default(now())
  author     User              @relation(name: "sentMessages", fields: [authorId], references: [id])
  authorId   String
  receiver   User              @relation(name: "receivedMessages", fields: [receiverId], references: [id])
  receiverId String
  reactions  MessageReaction[]
  text       String            @db.VarChar(10000)
}

model MessageReaction {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  text      String

  @@id([userId, messageId])
}
